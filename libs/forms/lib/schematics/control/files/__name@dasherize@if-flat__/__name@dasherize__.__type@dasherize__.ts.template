import { Component, OnInit<% if(changeDetection !== 'Default') { %>, ChangeDetectionStrategy<% }%><% if(!!viewEncapsulation) { %>, ViewEncapsulation<% }%> } from '@angular/core';<% if(instance == 'Array') { %>
import { FormGroup } from '@angular/forms';<% } %>
import {
  DynBaseConfig,
  DynForm<%= classify(instance) %>,
  DynMode,
  DynPartial<% if (instance === 'Container') { %>Group<% } else { %>Control<% } %>Config,
} from '@myndpm/dyn-forms/core';
import { <%= prefixInterface %><%= prefixClass ? classify(prefix) : '' %><%= classify(name) %>Params } from './<%= dasherize(name)%>.<%= dasherize(type)%>.params';

@Component({
  selector: '<%= selector %>',
  templateUrl: './<%= dasherize(name) %><%= type ? '.' + dasherize(type): '' %>.html',
  styleUrls: ['./<%= dasherize(name) %><%= type ? '.' + dasherize(type): '' %>.<%= style %>']<% if(!!viewEncapsulation) { %>,
  encapsulation: ViewEncapsulation.<%= viewEncapsulation %><% } if (changeDetection !== 'Default') { %>,
  changeDetection: ChangeDetectionStrategy.<%= changeDetection %>,<% } %>
})
export class <%= prefixClass ? classify(prefix) : '' %><%= classify(name) %><%= classify(type) %>
extends DynForm<%= classify(instance) %><DynMode, <%= prefixInterface %><%= prefixClass ? classify(prefix) : '' %><%= classify(name) %>Params>
implements OnInit {

  static dynControl: '<%= id %>' = '<%= id %>';

  static createConfig<M extends DynMode>(
    partial: DynPartial<% if (instance === 'Container') { %>Group<% } else { %>Control<% } %>Config<M, <%= prefixInterface %><%= prefixClass ? classify(prefix) : '' %><%= classify(name) %>Params>,
  ): DynBaseConfig<M> {
    return {
      ...partial,
      control: <%= prefixClass ? classify(prefix) : '' %><%= classify(name) %><%= classify(type) %>.dynControl,
    };
  }
<% if(instance == 'Array') { %>
  get items(): FormGroup[] {
    return this.control.controls as FormGroup[];
  }
<% } %>
  ngOnInit(): void {
    super.ngOnInit(); // need to initialize the parent class first
  }

  completeParams(params: Partial<<%= prefixInterface %><%= prefixClass ? classify(prefix) : '' %><%= classify(name) %>Params>): <%= prefixInterface %><%= classify(prefix) %><%= classify(name) %>Params {
    return {
      ...params,
    };
  }
}
